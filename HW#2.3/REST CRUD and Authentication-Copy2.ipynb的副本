{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>Airtable RESTful API CRUD Operations</center></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Retrieve Airtable Records"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Airtable Shared Link for replicating the CRUD test\n",
    "# https://airtable.com/invite/l?inviteId=inv31Eus4LSb35kqD&inviteToken=dde2497f4176828f7b61a4d3e67d6f3d67b425229f50942eddb637b037631bc1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "[{'name': 'Pen Red', 'productID': '1001', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.23, 'quantity': 5000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'recSuYjfVpVEPcP0L'}, {'name': 'Pen Blue', 'productID': '1002', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.25, 'quantity': 8000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'reczpU2sKSjXtwhZ3'}, {'name': 'Pen Black', 'productID': '1003', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.25, 'quantity': 2000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'recmK3Tc4WOZI83mo'}, {'name': 'Pencil 2B', 'productID': '1004', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.48, 'quantity': 10000, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recK73LOkp33AfY8Z'}, {'name': 'Pencil 2H', 'productID': '1005', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.49, 'quantity': 8000, 'supplierID': '502', 'productCode': 'PEC', 'record_id': 'recp2FHV7XmUV16f9'}, {'name': 'Pencil HB', 'productID': '1006', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 1.99, 'quantity': 500, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recVCPApuUz6hHtja'}, {'name': 'Pencil 3B', 'productID': '2001', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.52, 'quantity': 500, 'supplierID': '503', 'productCode': 'PEC', 'record_id': 'rec3a5OT6aiD6BtFi'}, {'name': 'Pencil 4B', 'productID': '2002', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.62, 'quantity': 200, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recNRJL0CXdzvyr1M'}, {'name': 'Pencil 5B', 'productID': '2003', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.73, 'quantity': 100, 'supplierID': '503', 'productCode': 'PEC', 'record_id': 'recS8ewzvtj2qcBHi'}, {'name': 'Pencil 6B', 'productID': '2004', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.47, 'quantity': 500, 'supplierID': '502', 'productCode': 'PEC', 'record_id': 'recznH6EiyFvXfVun'}]\n",
      "\n",
      "\n",
      "        name productID link-to-product-type  price  quantity supplierID  \\\n",
      "0    Pen Red      1001  [rec08NOK4qvU6QYwj]   1.23      5000        501   \n",
      "1   Pen Blue      1002  [rec08NOK4qvU6QYwj]   1.25      8000        501   \n",
      "2  Pen Black      1003  [rec08NOK4qvU6QYwj]   1.25      2000        501   \n",
      "3  Pencil 2B      1004  [rechIqwrLbYB8DxGM]   0.48     10000        501   \n",
      "4  Pencil 2H      1005  [rechIqwrLbYB8DxGM]   0.49      8000        502   \n",
      "5  Pencil HB      1006  [rechIqwrLbYB8DxGM]   1.99       500        501   \n",
      "6  Pencil 3B      2001  [rechIqwrLbYB8DxGM]   0.52       500        503   \n",
      "7  Pencil 4B      2002  [rechIqwrLbYB8DxGM]   0.62       200        501   \n",
      "8  Pencil 5B      2003  [rechIqwrLbYB8DxGM]   0.73       100        503   \n",
      "9  Pencil 6B      2004  [rechIqwrLbYB8DxGM]   0.47       500        502   \n",
      "\n",
      "  productCode          record_id  \n",
      "0         PEN  recSuYjfVpVEPcP0L  \n",
      "1         PEN  reczpU2sKSjXtwhZ3  \n",
      "2         PEN  recmK3Tc4WOZI83mo  \n",
      "3         PEC  recK73LOkp33AfY8Z  \n",
      "4         PEC  recp2FHV7XmUV16f9  \n",
      "5         PEC  recVCPApuUz6hHtja  \n",
      "6         PEC  rec3a5OT6aiD6BtFi  \n",
      "7         PEC  recNRJL0CXdzvyr1M  \n",
      "8         PEC  recS8ewzvtj2qcBHi  \n",
      "9         PEC  recznH6EiyFvXfVun  \n",
      "\n",
      "\n",
      "['Pen Red', 'Pen Blue', 'Pen Black', 'Pencil 2B', 'Pencil 2H', 'Pencil HB', 'Pencil 3B', 'Pencil 4B', 'Pencil 5B', 'Pencil 6B']\n",
      "           0\n",
      "0    Pen Red\n",
      "1   Pen Blue\n",
      "2  Pen Black\n",
      "3  Pencil 2B\n",
      "4  Pencil 2H\n",
      "5  Pencil HB\n",
      "6  Pencil 3B\n",
      "7  Pencil 4B\n",
      "8  Pencil 5B\n",
      "9  Pencil 6B\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "headers = {\n",
    "'Authorization': 'Bearer keycxxxxxxxxxxx',\n",
    "}\n",
    "\n",
    "params = (\n",
    "('view', 'Main'),\n",
    ")\n",
    "# Using the Southwind Base stored in the COM5940 workspace\n",
    "r = requests.get('https://api.airtable.com/v0/app9999999999999/products?api_key=keycxxxxxxxxxx&sortField=productID&sortDirection=asc', headers=headers, params=params)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "dict = r.json()\n",
    "dataset = []\n",
    "productID = []\n",
    "productCode = []\n",
    "result = []\n",
    "for data in dict['records']:\n",
    "     field_content = data['fields']\n",
    "     dataset.append(field_content)\n",
    "print(dataset)\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))\n",
    "print('\\n')\n",
    "for field in dataset:\n",
    "    productID.append(field.get('productID'))\n",
    "    productCode.append(field.get('productCode'))\n",
    "    result.append(field.get('name'))\n",
    "print(result)\n",
    "print(pd.DataFrame(result))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Airtable Record"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "{\"id\":\"recgw9YcNOqJxDuVq\",\"fields\":{\"productID\":\"2007\",\"productCode\":\"PEN\",\"name\":\"Blue Green\",\"quantity\":10,\"price\":35.5,\"supplierID\":\"502\",\"link-to-product-type\":[\"rec08NOK4qvU6QYwj\"],\"record_id\":\"recgw9YcNOqJxDuVq\"},\"createdTime\":\"2021-02-20T09:31:32.000Z\"}\n",
      "Status Code: 200\n",
      "[{'name': 'Pen Red', 'productID': '1001', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.23, 'quantity': 5000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'recSuYjfVpVEPcP0L'}, {'name': 'Pen Blue', 'productID': '1002', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.25, 'quantity': 8000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'reczpU2sKSjXtwhZ3'}, {'name': 'Pen Black', 'productID': '1003', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.25, 'quantity': 2000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'recmK3Tc4WOZI83mo'}, {'name': 'Pencil 2B', 'productID': '1004', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.48, 'quantity': 10000, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recK73LOkp33AfY8Z'}, {'name': 'Pencil 2H', 'productID': '1005', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.49, 'quantity': 8000, 'supplierID': '502', 'productCode': 'PEC', 'record_id': 'recp2FHV7XmUV16f9'}, {'name': 'Pencil HB', 'productID': '1006', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 1.99, 'quantity': 500, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recVCPApuUz6hHtja'}, {'name': 'Pencil 3B', 'productID': '2001', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.52, 'quantity': 500, 'supplierID': '503', 'productCode': 'PEC', 'record_id': 'rec3a5OT6aiD6BtFi'}, {'name': 'Pencil 4B', 'productID': '2002', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.62, 'quantity': 200, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recNRJL0CXdzvyr1M'}, {'name': 'Pencil 5B', 'productID': '2003', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.73, 'quantity': 100, 'supplierID': '503', 'productCode': 'PEC', 'record_id': 'recS8ewzvtj2qcBHi'}, {'name': 'Pencil 6B', 'productID': '2004', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.47, 'quantity': 500, 'supplierID': '502', 'productCode': 'PEC', 'record_id': 'recznH6EiyFvXfVun'}, {'name': 'Blue Green', 'productID': '2005', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 17.2, 'quantity': 33, 'supplierID': '502', 'productCode': 'PEN', 'record_id': 'recpAeNgXLbKXY3eS'}, {'productID': '2007', 'productCode': 'PEN', 'name': 'Blue Green', 'quantity': 10, 'price': 35.5, 'supplierID': '502', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'record_id': 'recgw9YcNOqJxDuVq'}]\n",
      "\n",
      "\n",
      "          name productID link-to-product-type  price  quantity supplierID  \\\n",
      "0      Pen Red      1001  [rec08NOK4qvU6QYwj]   1.23      5000        501   \n",
      "1     Pen Blue      1002  [rec08NOK4qvU6QYwj]   1.25      8000        501   \n",
      "2    Pen Black      1003  [rec08NOK4qvU6QYwj]   1.25      2000        501   \n",
      "3    Pencil 2B      1004  [rechIqwrLbYB8DxGM]   0.48     10000        501   \n",
      "4    Pencil 2H      1005  [rechIqwrLbYB8DxGM]   0.49      8000        502   \n",
      "5    Pencil HB      1006  [rechIqwrLbYB8DxGM]   1.99       500        501   \n",
      "6    Pencil 3B      2001  [rechIqwrLbYB8DxGM]   0.52       500        503   \n",
      "7    Pencil 4B      2002  [rechIqwrLbYB8DxGM]   0.62       200        501   \n",
      "8    Pencil 5B      2003  [rechIqwrLbYB8DxGM]   0.73       100        503   \n",
      "9    Pencil 6B      2004  [rechIqwrLbYB8DxGM]   0.47       500        502   \n",
      "10  Blue Green      2005  [rec08NOK4qvU6QYwj]  17.20        33        502   \n",
      "11  Blue Green      2007  [rec08NOK4qvU6QYwj]  35.50        10        502   \n",
      "\n",
      "   productCode          record_id  \n",
      "0          PEN  recSuYjfVpVEPcP0L  \n",
      "1          PEN  reczpU2sKSjXtwhZ3  \n",
      "2          PEN  recmK3Tc4WOZI83mo  \n",
      "3          PEC  recK73LOkp33AfY8Z  \n",
      "4          PEC  recp2FHV7XmUV16f9  \n",
      "5          PEC  recVCPApuUz6hHtja  \n",
      "6          PEC  rec3a5OT6aiD6BtFi  \n",
      "7          PEC  recNRJL0CXdzvyr1M  \n",
      "8          PEC  recS8ewzvtj2qcBHi  \n",
      "9          PEC  recznH6EiyFvXfVun  \n",
      "10         PEN  recpAeNgXLbKXY3eS  \n",
      "11         PEN  recgw9YcNOqJxDuVq  \n",
      "\n",
      "\n",
      "['Pen Red', 'Pen Blue', 'Pen Black', 'Pencil 2B', 'Pencil 2H', 'Pencil HB', 'Pencil 3B', 'Pencil 4B', 'Pencil 5B', 'Pencil 6B', 'Blue Green', 'Blue Green']\n",
      "             0\n",
      "0      Pen Red\n",
      "1     Pen Blue\n",
      "2    Pen Black\n",
      "3    Pencil 2B\n",
      "4    Pencil 2H\n",
      "5    Pencil HB\n",
      "6    Pencil 3B\n",
      "7    Pencil 4B\n",
      "8    Pencil 5B\n",
      "9    Pencil 6B\n",
      "10  Blue Green\n",
      "11  Blue Green\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# Add Record\n",
    "#\n",
    "\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "productID = '2007'\n",
    "productCode = 'PEN'\n",
    "name =  'Blue Green'\n",
    "quantity = 10   \n",
    "price = 35.5\n",
    "supplierID = '502'\n",
    "\n",
    "mydict =  {\n",
    "    \"productID\": productID,\n",
    "    \"productCode\": productCode,\n",
    "    \"name\": name,\n",
    "    \"quantity\": quantity,\n",
    "    \"price\": price,\n",
    "    \"supplierID\": supplierID,\n",
    "    \"link-to-product-type\": [\n",
    "          \"rec08NOK4qvU6QYwj\"\n",
    "        ]\n",
    "    }\n",
    "\n",
    "data = {\"fields\": mydict}\n",
    "headers = {'Authorization': 'Bearer keycxxxxxxxxxxxxx', 'Content-Type': 'application/json; charset=utf-8'}\n",
    "# r = requests.post(url = API_ENDPOINT, data = data)\n",
    "r = requests.post('https://api.airtable.com/v0/app999999999999/products',json=data,headers=headers)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "print(r.text)\n",
    "\n",
    "params = (\n",
    "('view', 'Main'),\n",
    ")\n",
    "# Using the Southwind Base stored in the COM5940 workspace\n",
    "r = requests.get('https://api.airtable.com/v0/app9999999999/products?api_key=keycxxxxxxxxxx&sortField=productID&sortDirection=asc', headers=headers, params=params)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "dict = r.json()\n",
    "dataset = []\n",
    "productID = []\n",
    "productCode = []\n",
    "result = []\n",
    "for data in dict['records']:\n",
    "     field_content = data['fields']\n",
    "     dataset.append(field_content)\n",
    "print(dataset)\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))\n",
    "print('\\n')\n",
    "for field in dataset:\n",
    "    productID.append(field.get('productID'))\n",
    "    productCode.append(field.get('productCode'))\n",
    "    result.append(field.get('name'))\n",
    "print(result)\n",
    "print(pd.DataFrame(result))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Update Airtable Record"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "# Update Records\n",
    "#\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "#productID = '2006'\n",
    "#productCode = 'PEN'\n",
    "#name =  'Pen Green'\n",
    "#quantity = 10   \n",
    "#price = 25.5\n",
    "#supplierID = '502'\n",
    "\n",
    "data = {\n",
    "  \"records\": [\n",
    "    {\n",
    "      \"id\": \"recgw9YcNOqJxDuVq\",\n",
    "      \"fields\": {\n",
    "        \"productID\": \"2007\",\n",
    "        \"productCode\": 'PEN',\n",
    "        \"name\": 'Pen Red',\n",
    "        \"quantity\": 50,\n",
    "        \"price\": 25.50,\n",
    "        \"supplierID\": '502',\n",
    "        \"link-to-product-type\": [\n",
    "          \"rec08NOK4qvU6QYwj\"\n",
    "        ]  \n",
    "      }\n",
    "    }\n",
    "  ] # end records\n",
    "} # end data\n",
    "headers = {'Authorization': 'Bearer keyxxxxxxxxxxx', 'Content-Type': 'application/json; charset=utf-8'}\n",
    "r = requests.put('https://api.airtable.com/v0/app9999999999/products',json=data,headers=headers)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "print(r.text)\n",
    "params = (\n",
    "('view', 'Main'),\n",
    ")\n",
    "# Using the Southwind Base stored in the COM5940 workspace\n",
    "r = requests.get('https://api.airtable.com/v0/app99999999/products?api_key=keycxxxxxxxxxxx&sortField=productID&sortDirection=asc', headers=headers, params=params)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "dict = r.json()\n",
    "dataset = []\n",
    "productID = []\n",
    "productCode = []\n",
    "result = []\n",
    "for data in dict['records']:\n",
    "     field_content = data['fields']\n",
    "     dataset.append(field_content)\n",
    "print(dataset)\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))\n",
    "print('\\n')\n",
    "for field in dataset:\n",
    "    productID.append(field.get('productID'))\n",
    "    productCode.append(field.get('productCode'))\n",
    "    result.append(field.get('name'))\n",
    "print(result)\n",
    "print(pd.DataFrame(result))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Delete Airtable Record"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "{\"deleted\":true,\"id\":\"recgw9YcNOqJxDuVq\"}\n",
      "Status Code: 200\n",
      "[{'name': 'Pen Red', 'productID': '1001', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.23, 'quantity': 5000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'recSuYjfVpVEPcP0L'}, {'name': 'Pen Blue', 'productID': '1002', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.25, 'quantity': 8000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'reczpU2sKSjXtwhZ3'}, {'name': 'Pen Black', 'productID': '1003', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 1.25, 'quantity': 2000, 'supplierID': '501', 'productCode': 'PEN', 'record_id': 'recmK3Tc4WOZI83mo'}, {'name': 'Pencil 2B', 'productID': '1004', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.48, 'quantity': 10000, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recK73LOkp33AfY8Z'}, {'name': 'Pencil 2H', 'productID': '1005', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.49, 'quantity': 8000, 'supplierID': '502', 'productCode': 'PEC', 'record_id': 'recp2FHV7XmUV16f9'}, {'name': 'Pencil HB', 'productID': '1006', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 1.99, 'quantity': 500, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recVCPApuUz6hHtja'}, {'name': 'Pencil 3B', 'productID': '2001', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.52, 'quantity': 500, 'supplierID': '503', 'productCode': 'PEC', 'record_id': 'rec3a5OT6aiD6BtFi'}, {'name': 'Pencil 4B', 'productID': '2002', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.62, 'quantity': 200, 'supplierID': '501', 'productCode': 'PEC', 'record_id': 'recNRJL0CXdzvyr1M'}, {'name': 'Pencil 5B', 'productID': '2003', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.73, 'quantity': 100, 'supplierID': '503', 'productCode': 'PEC', 'record_id': 'recS8ewzvtj2qcBHi'}, {'name': 'Pencil 6B', 'productID': '2004', 'link-to-product-type': ['rechIqwrLbYB8DxGM'], 'price': 0.47, 'quantity': 500, 'supplierID': '502', 'productCode': 'PEC', 'record_id': 'recznH6EiyFvXfVun'}, {'name': 'Blue Green', 'productID': '2005', 'link-to-product-type': ['rec08NOK4qvU6QYwj'], 'price': 17.2, 'quantity': 33, 'supplierID': '502', 'productCode': 'PEN', 'record_id': 'recpAeNgXLbKXY3eS'}]\n",
      "\n",
      "\n",
      "          name productID link-to-product-type  price  quantity supplierID  \\\n",
      "0      Pen Red      1001  [rec08NOK4qvU6QYwj]   1.23      5000        501   \n",
      "1     Pen Blue      1002  [rec08NOK4qvU6QYwj]   1.25      8000        501   \n",
      "2    Pen Black      1003  [rec08NOK4qvU6QYwj]   1.25      2000        501   \n",
      "3    Pencil 2B      1004  [rechIqwrLbYB8DxGM]   0.48     10000        501   \n",
      "4    Pencil 2H      1005  [rechIqwrLbYB8DxGM]   0.49      8000        502   \n",
      "5    Pencil HB      1006  [rechIqwrLbYB8DxGM]   1.99       500        501   \n",
      "6    Pencil 3B      2001  [rechIqwrLbYB8DxGM]   0.52       500        503   \n",
      "7    Pencil 4B      2002  [rechIqwrLbYB8DxGM]   0.62       200        501   \n",
      "8    Pencil 5B      2003  [rechIqwrLbYB8DxGM]   0.73       100        503   \n",
      "9    Pencil 6B      2004  [rechIqwrLbYB8DxGM]   0.47       500        502   \n",
      "10  Blue Green      2005  [rec08NOK4qvU6QYwj]  17.20        33        502   \n",
      "\n",
      "   productCode          record_id  \n",
      "0          PEN  recSuYjfVpVEPcP0L  \n",
      "1          PEN  reczpU2sKSjXtwhZ3  \n",
      "2          PEN  recmK3Tc4WOZI83mo  \n",
      "3          PEC  recK73LOkp33AfY8Z  \n",
      "4          PEC  recp2FHV7XmUV16f9  \n",
      "5          PEC  recVCPApuUz6hHtja  \n",
      "6          PEC  rec3a5OT6aiD6BtFi  \n",
      "7          PEC  recNRJL0CXdzvyr1M  \n",
      "8          PEC  recS8ewzvtj2qcBHi  \n",
      "9          PEC  recznH6EiyFvXfVun  \n",
      "10         PEN  recpAeNgXLbKXY3eS  \n",
      "\n",
      "\n",
      "['Pen Red', 'Pen Blue', 'Pen Black', 'Pencil 2B', 'Pencil 2H', 'Pencil HB', 'Pencil 3B', 'Pencil 4B', 'Pencil 5B', 'Pencil 6B', 'Blue Green']\n",
      "             0\n",
      "0      Pen Red\n",
      "1     Pen Blue\n",
      "2    Pen Black\n",
      "3    Pencil 2B\n",
      "4    Pencil 2H\n",
      "5    Pencil HB\n",
      "6    Pencil 3B\n",
      "7    Pencil 4B\n",
      "8    Pencil 5B\n",
      "9    Pencil 6B\n",
      "10  Blue Green\n"
     ]
    }
   ],
   "source": [
    "#\n",
    "# Delete Record\n",
    "#\n",
    "import requests\n",
    "import pandas as pd\n",
    "\n",
    "headers = {'Authorization': 'Bearer keycxxxxxxxxx', 'Content-Type': 'application/x-www-form-urlencoded'}\n",
    "r = requests.delete('https://api.airtable.com/v0/app999999999/products/recgw9YcNOqJxDuVq',headers=headers)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "print(r.text)\n",
    "\n",
    "params = (\n",
    "('view', 'Main'),\n",
    ")\n",
    "# Using the Southwind Base stored in the COM5940 workspace\n",
    "r = requests.get('https://api.airtable.com/v0/app999999999/products?api_key=keycxxxxxxxxxxx&sortField=productID&sortDirection=asc', headers=headers, params=params)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "dict = r.json()\n",
    "dataset = []\n",
    "productID = []\n",
    "productCode = []\n",
    "result = []\n",
    "for data in dict['records']:\n",
    "     field_content = data['fields']\n",
    "     dataset.append(field_content)\n",
    "print(dataset)\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))\n",
    "print('\\n')\n",
    "for field in dataset:\n",
    "    productID.append(field.get('productID'))\n",
    "    productCode.append(field.get('productCode'))\n",
    "    result.append(field.get('name'))\n",
    "print(result)\n",
    "print(pd.DataFrame(result))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API CRUD Operations</center></h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "[{'id': 70, 'title': '世界之窗', 'content': ''}, {'id': 66, 'title': '东部华侨城', 'content': ''}, {'id': 55, 'title': '欢乐谷', 'content': ''}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "   id  title content\n",
      "0  70   世界之窗        \n",
      "1  66  东部华侨城        \n",
      "2  55    欢乐谷        \n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "\n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API GET(Retrieve) Operation (Local Mode)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "[{'id': 70, 'title': '世界之窗', 'content': ''}, {'id': 66, 'title': '东部华侨城', 'content': ''}, {'id': 55, 'title': '欢乐谷', 'content': ''}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "   id  title content\n",
      "0  70   世界之窗        \n",
      "1  66  东部华侨城        \n",
      "2  55    欢乐谷        \n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "\n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style=\"color:red;\"><center>Basic Auth</center></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API POST(Create) Operation (Basic Auth)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 201\n",
      "Status Code: 200\n",
      "[{'id': 82, 'title': '动物园', 'content': ''}, {'id': 70, 'title': '世界之窗', 'content': ''}, {'id': 66, 'title': '东部华侨城', 'content': ''}, {'id': 55, 'title': '欢乐谷', 'content': ''}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "   id  title content\n",
      "0  82    动物园        \n",
      "1  70   世界之窗        \n",
      "2  66  东部华侨城        \n",
      "3  55    欢乐谷        \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "title = '动物园'\n",
    "content = ''\n",
    "status = 'publish'\n",
    "\n",
    "data =  {\n",
    "    \"title\": title,\n",
    "    \"content\": content,\n",
    "    \"status\": status\n",
    "    }\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places'\n",
    "r=requests.post(url, \n",
    "                headers={\"Authorization\": \"Basic WXVxaW5nIE5hbjpKb3VyMjAxOSE\"},\n",
    "                data=data)\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API PUT(Update) Operation (Basic Auth)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "Status Code: 200\n",
      "[{'id': 82, 'title': '动物园#2', 'content': ''}, {'id': 70, 'title': '世界之窗', 'content': ''}, {'id': 66, 'title': '东部华侨城', 'content': ''}, {'id': 55, 'title': '欢乐谷', 'content': ''}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "   id  title content\n",
      "0  82  动物园#2        \n",
      "1  70   世界之窗        \n",
      "2  66  东部华侨城        \n",
      "3  55    欢乐谷        \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "title = '动物园#2'\n",
    "content = ''\n",
    "status = 'publish'\n",
    "\n",
    "data =  {\n",
    "    \"title\": title,\n",
    "    \"content\": content,\n",
    "    \"status\": status\n",
    "    }\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places/82' # WP post ID 292\n",
    "r=requests.put(url, \n",
    "                headers={\"Authorization\": \"Basic WXVxaW5nIE5hbjpKb3VyMjAxOSE\"},\n",
    "                data=data)\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API DELETE(Delete) Operation (Basic Auth)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "Status Code: 200\n",
      "[{'id': 70, 'title': '世界之窗', 'content': ''}, {'id': 66, 'title': '东部华侨城', 'content': ''}, {'id': 55, 'title': '欢乐谷', 'content': ''}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "   id  title content\n",
      "0  70   世界之窗        \n",
      "1  66  东部华侨城        \n",
      "2  55    欢乐谷        \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places/82' # WP post ID 292\n",
    "r=requests.delete(url, \n",
    "            headers = {'Authorization': 'Basic WXVxaW5nIE5hbjpKb3VyMjAxOSE', 'Content-Type': 'application/x-www-form-urlencoded'})\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/places'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style=\"color:red;\"><center>JWT</center></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API POST(Create) Operation (JWT Auth)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 401\n",
      "Status Code: 200\n",
      "[{'id': 297, 'title': 'Juju Breakfast', 'content': 'You are very hungry!\\n'}, {'id': 289, 'title': 'Test Oauth3', 'content': 'Easy!\\n'}, {'id': 288, 'title': 'Test Oauth2', 'content': 'The key is the access code.\\n'}, {'id': 286, 'title': 'Test JWT 2', 'content': 'Hope it works again.\\n'}, {'id': 285, 'title': 'Test JWT', 'content': 'Hope it works.\\n'}, {'id': 283, 'title': 'Queen&#8217;s Coffee', 'content': 'Hong Kong Coffee as its best!\\n'}, {'id': 281, 'title': 'Good Food Kitchen', 'content': 'A vegetarian dining paradise to be celebrated.\\n'}, {'id': 160, 'title': 'Fusan Coffee', 'content': '每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹着凤梨果脯，却是奇妙的杏肉口感，果肉的一点点酸缓和了奶油的甜腻，口感更加轻盈。饱满的形状与丰收的颜色，一口就尝到馥郁的秋天。\\n'}, {'id': 154, 'title': 'StillWater', 'content': 'Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛奶没有过度融合，但也没有格格不入，是一款会让人记住的味道。初冬季节，一本书一杯 dirty，静水伴你一整个温暖的下午。\\n'}, {'id': 148, 'title': 'The Bake Shop', 'content': '瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥郁的香气。The Bake Shop 经典小豆蔻面包，采用瑞典原始工艺，配合进口豆蔻和优质黄油，给你最地道的北欧体验。\\n'}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "    id                 title  \\\n",
      "0  297        Juju Breakfast   \n",
      "1  289           Test Oauth3   \n",
      "2  288           Test Oauth2   \n",
      "3  286            Test JWT 2   \n",
      "4  285              Test JWT   \n",
      "5  283  Queen&#8217;s Coffee   \n",
      "6  281     Good Food Kitchen   \n",
      "7  160          Fusan Coffee   \n",
      "8  154            StillWater   \n",
      "9  148         The Bake Shop   \n",
      "\n",
      "                                             content  \n",
      "0                             You are very hungry!\\n  \n",
      "1                                            Easy!\\n  \n",
      "2                      The key is the access code.\\n  \n",
      "3                             Hope it works again.\\n  \n",
      "4                                   Hope it works.\\n  \n",
      "5                    Hong Kong Coffee as its best!\\n  \n",
      "6   A vegetarian dining paradise to be celebrated.\\n  \n",
      "7  每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹...  \n",
      "8  Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛...  \n",
      "9  瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥...  \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, jsonify, make_response\n",
    "import base64\n",
    "import requests\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "title = 'Soo-soo Gourmet'\n",
    "content = 'I am hungry!'\n",
    "status = 'publish'\n",
    "\n",
    "data =  {\n",
    "    \"title\": title,\n",
    "    \"content\": content,\n",
    "    \"status\": status\n",
    "    }\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "jwt = \"eyxxxxxxxxxxxx99999999999xxxxxxxxxxxxxxxxxxxxxxxxxxx9999999999999\"\n",
    "                headers={\"Authorization\": \"Bearer %s\" % jwt},\n",
    "                data=data)\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API PUT(Update) Operation (JWT Auth)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 404\n",
      "Status Code: 200\n",
      "[{'id': 297, 'title': 'Juju Gourmet', 'content': 'You are hungry!\\n'}, {'id': 289, 'title': 'Test Oauth3', 'content': 'Easy!\\n'}, {'id': 288, 'title': 'Test Oauth2', 'content': 'The key is the access code.\\n'}, {'id': 286, 'title': 'Test JWT 2', 'content': 'Hope it works again.\\n'}, {'id': 285, 'title': 'Test JWT', 'content': 'Hope it works.\\n'}, {'id': 283, 'title': 'Queen&#8217;s Coffee', 'content': 'Hong Kong Coffee as its best!\\n'}, {'id': 281, 'title': 'Good Food Kitchen', 'content': 'A vegetarian dining paradise to be celebrated.\\n'}, {'id': 160, 'title': 'Fusan Coffee', 'content': '每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹着凤梨果脯，却是奇妙的杏肉口感，果肉的一点点酸缓和了奶油的甜腻，口感更加轻盈。饱满的形状与丰收的颜色，一口就尝到馥郁的秋天。\\n'}, {'id': 154, 'title': 'StillWater', 'content': 'Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛奶没有过度融合，但也没有格格不入，是一款会让人记住的味道。初冬季节，一本书一杯 dirty，静水伴你一整个温暖的下午。\\n'}, {'id': 148, 'title': 'The Bake Shop', 'content': '瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥郁的香气。The Bake Shop 经典小豆蔻面包，采用瑞典原始工艺，配合进口豆蔻和优质黄油，给你最地道的北欧体验。\\n'}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "    id                 title  \\\n",
      "0  297          Juju Gourmet   \n",
      "1  289           Test Oauth3   \n",
      "2  288           Test Oauth2   \n",
      "3  286            Test JWT 2   \n",
      "4  285              Test JWT   \n",
      "5  283  Queen&#8217;s Coffee   \n",
      "6  281     Good Food Kitchen   \n",
      "7  160          Fusan Coffee   \n",
      "8  154            StillWater   \n",
      "9  148         The Bake Shop   \n",
      "\n",
      "                                             content  \n",
      "0                                  You are hungry!\\n  \n",
      "1                                            Easy!\\n  \n",
      "2                      The key is the access code.\\n  \n",
      "3                             Hope it works again.\\n  \n",
      "4                                   Hope it works.\\n  \n",
      "5                    Hong Kong Coffee as its best!\\n  \n",
      "6   A vegetarian dining paradise to be celebrated.\\n  \n",
      "7  每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹...  \n",
      "8  Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛...  \n",
      "9  瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥...  \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "title = 'Soo-soo Dinner'\n",
    "content = 'Well fed!'\n",
    "status = 'publish'\n",
    "\n",
    "data =  {\n",
    "    \"title\": title,\n",
    "    \"content\": content,\n",
    "    \"status\": status\n",
    "    }\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants/294' # WP post ID 294\n",
    "jwt = \"eyxxxxxxx9999999999xxxxxxxxxx999999999999xxxxxxxxxxxxxxxx\"\n",
    "r=requests.put(url, \n",
    "                headers={\"Authorization\": \"Bearer %s\" % jwt},\n",
    "                data=data)\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API DELETE(Delete) Operation (JWT Auth)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "Status Code: 200\n",
      "[{'id': 289, 'title': 'Test Oauth3', 'content': 'Easy!\\n'}, {'id': 288, 'title': 'Test Oauth2', 'content': 'The key is the access code.\\n'}, {'id': 286, 'title': 'Test JWT 2', 'content': 'Hope it works again.\\n'}, {'id': 285, 'title': 'Test JWT', 'content': 'Hope it works.\\n'}, {'id': 283, 'title': 'Queen&#8217;s Coffee', 'content': 'Hong Kong Coffee as its best!\\n'}, {'id': 281, 'title': 'Good Food Kitchen', 'content': 'A vegetarian dining paradise to be celebrated.\\n'}, {'id': 160, 'title': 'Fusan Coffee', 'content': '每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹着凤梨果脯，却是奇妙的杏肉口感，果肉的一点点酸缓和了奶油的甜腻，口感更加轻盈。饱满的形状与丰收的颜色，一口就尝到馥郁的秋天。\\n'}, {'id': 154, 'title': 'StillWater', 'content': 'Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛奶没有过度融合，但也没有格格不入，是一款会让人记住的味道。初冬季节，一本书一杯 dirty，静水伴你一整个温暖的下午。\\n'}, {'id': 148, 'title': 'The Bake Shop', 'content': '瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥郁的香气。The Bake Shop 经典小豆蔻面包，采用瑞典原始工艺，配合进口豆蔻和优质黄油，给你最地道的北欧体验。\\n'}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "    id                 title  \\\n",
      "0  289           Test Oauth3   \n",
      "1  288           Test Oauth2   \n",
      "2  286            Test JWT 2   \n",
      "3  285              Test JWT   \n",
      "4  283  Queen&#8217;s Coffee   \n",
      "5  281     Good Food Kitchen   \n",
      "6  160          Fusan Coffee   \n",
      "7  154            StillWater   \n",
      "8  148         The Bake Shop   \n",
      "\n",
      "                                             content  \n",
      "0                                            Easy!\\n  \n",
      "1                      The key is the access code.\\n  \n",
      "2                             Hope it works again.\\n  \n",
      "3                                   Hope it works.\\n  \n",
      "4                    Hong Kong Coffee as its best!\\n  \n",
      "5   A vegetarian dining paradise to be celebrated.\\n  \n",
      "6  每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹...  \n",
      "7  Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛...  \n",
      "8  瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥...  \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants/294' # WP post ID 294\n",
    "r=requests.delete(url, \n",
    "            headers = {'Authorization': 'Bearer eyJXXXXXXXXXXX8888888888889999999', 'Content-Type': 'application/x-www-form-urlencoded'})\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 style=\"color:red;\"><center>Oauth2</center></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API POST(Create) Operation (Oauth2)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 201\n",
      "Status Code: 200\n",
      "[{'id': 297, 'title': 'Juju Gourmet', 'content': 'You are hungry!\\n'}, {'id': 289, 'title': 'Test Oauth3', 'content': 'Easy!\\n'}, {'id': 288, 'title': 'Test Oauth2', 'content': 'The key is the access code.\\n'}, {'id': 286, 'title': 'Test JWT 2', 'content': 'Hope it works again.\\n'}, {'id': 285, 'title': 'Test JWT', 'content': 'Hope it works.\\n'}, {'id': 283, 'title': 'Queen&#8217;s Coffee', 'content': 'Hong Kong Coffee as its best!\\n'}, {'id': 281, 'title': 'Good Food Kitchen', 'content': 'A vegetarian dining paradise to be celebrated.\\n'}, {'id': 160, 'title': 'Fusan Coffee', 'content': '每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹着凤梨果脯，却是奇妙的杏肉口感，果肉的一点点酸缓和了奶油的甜腻，口感更加轻盈。饱满的形状与丰收的颜色，一口就尝到馥郁的秋天。\\n'}, {'id': 154, 'title': 'StillWater', 'content': 'Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛奶没有过度融合，但也没有格格不入，是一款会让人记住的味道。初冬季节，一本书一杯 dirty，静水伴你一整个温暖的下午。\\n'}, {'id': 148, 'title': 'The Bake Shop', 'content': '瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥郁的香气。The Bake Shop 经典小豆蔻面包，采用瑞典原始工艺，配合进口豆蔻和优质黄油，给你最地道的北欧体验。\\n'}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "    id                 title  \\\n",
      "0  297          Juju Gourmet   \n",
      "1  289           Test Oauth3   \n",
      "2  288           Test Oauth2   \n",
      "3  286            Test JWT 2   \n",
      "4  285              Test JWT   \n",
      "5  283  Queen&#8217;s Coffee   \n",
      "6  281     Good Food Kitchen   \n",
      "7  160          Fusan Coffee   \n",
      "8  154            StillWater   \n",
      "9  148         The Bake Shop   \n",
      "\n",
      "                                             content  \n",
      "0                                  You are hungry!\\n  \n",
      "1                                            Easy!\\n  \n",
      "2                      The key is the access code.\\n  \n",
      "3                             Hope it works again.\\n  \n",
      "4                                   Hope it works.\\n  \n",
      "5                    Hong Kong Coffee as its best!\\n  \n",
      "6   A vegetarian dining paradise to be celebrated.\\n  \n",
      "7  每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹...  \n",
      "8  Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛...  \n",
      "9  瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥...  \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "title = 'Juju Gourmet'\n",
    "content = 'You are hungry!'\n",
    "status = 'publish'\n",
    "\n",
    "data =  {\n",
    "    \"title\": title,\n",
    "    \"content\": content,\n",
    "    \"status\": status\n",
    "    }\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants?access_token=ehXXXXXXXXXXXXXXX999999999999999'\n",
    "oauth2 = \"Basic Tmlxxxxxxxxxxxxxxxxxxxxxxxxxxxxxp999999999999999999999999==\"\n",
    "r=requests.post(url, \n",
    "                headers={\"Proxy-Authorization\": \"Basic %s\" % oauth2},\n",
    "                data=data)\n",
    "                \n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API PUT(Update) Operation (Oauth2)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "Status Code: 200\n",
      "[{'id': 297, 'title': 'Juju Breakfast', 'content': 'You are very hungry!\\n'}, {'id': 289, 'title': 'Test Oauth3', 'content': 'Easy!\\n'}, {'id': 288, 'title': 'Test Oauth2', 'content': 'The key is the access code.\\n'}, {'id': 286, 'title': 'Test JWT 2', 'content': 'Hope it works again.\\n'}, {'id': 285, 'title': 'Test JWT', 'content': 'Hope it works.\\n'}, {'id': 283, 'title': 'Queen&#8217;s Coffee', 'content': 'Hong Kong Coffee as its best!\\n'}, {'id': 281, 'title': 'Good Food Kitchen', 'content': 'A vegetarian dining paradise to be celebrated.\\n'}, {'id': 160, 'title': 'Fusan Coffee', 'content': '每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹着凤梨果脯，却是奇妙的杏肉口感，果肉的一点点酸缓和了奶油的甜腻，口感更加轻盈。饱满的形状与丰收的颜色，一口就尝到馥郁的秋天。\\n'}, {'id': 154, 'title': 'StillWater', 'content': 'Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛奶没有过度融合，但也没有格格不入，是一款会让人记住的味道。初冬季节，一本书一杯 dirty，静水伴你一整个温暖的下午。\\n'}, {'id': 148, 'title': 'The Bake Shop', 'content': '瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥郁的香气。The Bake Shop 经典小豆蔻面包，采用瑞典原始工艺，配合进口豆蔻和优质黄油，给你最地道的北欧体验。\\n'}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "    id                 title  \\\n",
      "0  297        Juju Breakfast   \n",
      "1  289           Test Oauth3   \n",
      "2  288           Test Oauth2   \n",
      "3  286            Test JWT 2   \n",
      "4  285              Test JWT   \n",
      "5  283  Queen&#8217;s Coffee   \n",
      "6  281     Good Food Kitchen   \n",
      "7  160          Fusan Coffee   \n",
      "8  154            StillWater   \n",
      "9  148         The Bake Shop   \n",
      "\n",
      "                                             content  \n",
      "0                             You are very hungry!\\n  \n",
      "1                                            Easy!\\n  \n",
      "2                      The key is the access code.\\n  \n",
      "3                             Hope it works again.\\n  \n",
      "4                                   Hope it works.\\n  \n",
      "5                    Hong Kong Coffee as its best!\\n  \n",
      "6   A vegetarian dining paradise to be celebrated.\\n  \n",
      "7  每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹...  \n",
      "8  Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛...  \n",
      "9  瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥...  \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "    \n",
    "title = 'Juju Breakfast'\n",
    "content = 'You are very hungry!'\n",
    "status = 'publish'\n",
    "\n",
    "data =  {\n",
    "    \"title\": title,\n",
    "    \"content\": content,\n",
    "    \"status\": status\n",
    "    }\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants/297?access_token=ehyw3afjd;adfjdla;fjdafjaldajiiiii'\n",
    "oauth2 = \"Basic TmlmZxxxxxx999999999xxxxxxxxxxxx999999999xxxxxIdA==\"\n",
    "r=requests.put(url, \n",
    "                headers={\"Proxy-Authorization\": \"Basic %s\" % oauth2},\n",
    "                data=data)\n",
    "                \n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>WordPress RESTful API DELETE(Delete) Operation (Oauth2)</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status Code: 200\n",
      "Status Code: 200\n",
      "[{'id': 289, 'title': 'Test Oauth3', 'content': 'Easy!\\n'}, {'id': 288, 'title': 'Test Oauth2', 'content': 'The key is the access code.\\n'}, {'id': 286, 'title': 'Test JWT 2', 'content': 'Hope it works again.\\n'}, {'id': 285, 'title': 'Test JWT', 'content': 'Hope it works.\\n'}, {'id': 283, 'title': 'Queen&#8217;s Coffee', 'content': 'Hong Kong Coffee as its best!\\n'}, {'id': 281, 'title': 'Good Food Kitchen', 'content': 'A vegetarian dining paradise to be celebrated.\\n'}, {'id': 160, 'title': 'Fusan Coffee', 'content': '每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹着凤梨果脯，却是奇妙的杏肉口感，果肉的一点点酸缓和了奶油的甜腻，口感更加轻盈。饱满的形状与丰收的颜色，一口就尝到馥郁的秋天。\\n'}, {'id': 154, 'title': 'StillWater', 'content': 'Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛奶没有过度融合，但也没有格格不入，是一款会让人记住的味道。初冬季节，一本书一杯 dirty，静水伴你一整个温暖的下午。\\n'}, {'id': 148, 'title': 'The Bake Shop', 'content': '瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥郁的香气。The Bake Shop 经典小豆蔻面包，采用瑞典原始工艺，配合进口豆蔻和优质黄油，给你最地道的北欧体验。\\n'}]\n",
      "**************************************************************************\n",
      "\n",
      "\n",
      "    id                 title  \\\n",
      "0  289           Test Oauth3   \n",
      "1  288           Test Oauth2   \n",
      "2  286            Test JWT 2   \n",
      "3  285              Test JWT   \n",
      "4  283  Queen&#8217;s Coffee   \n",
      "5  281     Good Food Kitchen   \n",
      "6  160          Fusan Coffee   \n",
      "7  154            StillWater   \n",
      "8  148         The Bake Shop   \n",
      "\n",
      "                                             content  \n",
      "0                                            Easy!\\n  \n",
      "1                      The key is the access code.\\n  \n",
      "2                             Hope it works again.\\n  \n",
      "3                                   Hope it works.\\n  \n",
      "4                    Hong Kong Coffee as its best!\\n  \n",
      "5   A vegetarian dining paradise to be celebrated.\\n  \n",
      "6  每一位来福叁的朋友，都会推荐杏儿。这款令人惊艳的甜品不仅颜值超高，而且层次细腻丰富。奶油包裹...  \n",
      "7  Dirty 口感浓郁醇厚，回味悠长。默认使用的是冰博克，混合海盐，也可以换成全脂奶。咖啡和牛...  \n",
      "8  瑞典人对甜面包极其用心，而小豆蔻正是瑞典的代表面包之一。瑞典人迁徙到哪里，哪里就飘散着豆蔻馥...  \n"
     ]
    }
   ],
   "source": [
    "from flask import Flask, request, make_response\n",
    "import base64\n",
    "import requests\n",
    "from requests.auth import HTTPBasicAuth\n",
    "import pandas as pd\n",
    "from io import StringIO\n",
    "from html.parser import HTMLParser\n",
    "\n",
    "class MLStripper(HTMLParser):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.reset()\n",
    "        self.strict = False\n",
    "        self.convert_charrefs= True\n",
    "        self.text = StringIO()\n",
    "    def handle_data(self, d):\n",
    "        self.text.write(d)\n",
    "    def get_data(self):\n",
    "        return self.text.getvalue()\n",
    "    \n",
    "def strip_tags(html):\n",
    "    s = MLStripper()\n",
    "    s.feed(html)\n",
    "    return s.get_data()\n",
    "\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants/297?access_token=ehyxxxxxxxxx99999999999999999999'\n",
    "oauth2 = \"Basic Tmlmxxxxxxxxxxxxxxxxx99999999999999999999999999==\"\n",
    "r=requests.delete(url, \n",
    "                headers={\"Proxy-Authorization\": \"Basic %s\" % oauth2})\n",
    "\n",
    "print(\"Status Code:\",r.status_code)\n",
    "        \n",
    "user = 'admin'\n",
    "url = 'http://localhost/wp_demo/wp-json/wp/v2/restaurants'\n",
    "r = requests.get(url)\n",
    "print(\"Status Code:\",r.status_code)\n",
    "r_list = r.json()\n",
    "\n",
    "dataset = []\n",
    "dict = {}\n",
    "for i in r_list:    \n",
    "     # print(i['id'])\n",
    "     dict['id'] = i['id']   \n",
    "     title = i['title']\n",
    "     content = i['content']\n",
    "     for k, v in title.items():\n",
    "        # print(v)\n",
    "        dict['title'] = v\n",
    "     for k, v in content.items():\n",
    "        # print(v)\n",
    "        if k == 'rendered':\n",
    "            dict['content'] = strip_tags(v)\n",
    "     dataset.append(dict.copy())\n",
    "print(dataset)\n",
    "print('**************************************************************************')\n",
    "print('\\n')\n",
    "print(pd.DataFrame(dataset))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
